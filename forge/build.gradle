plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version  '+'
    id 'org.spongepowered.mixin' version '0.+'
}
base {
    archivesName = "${mod_id}-forge-${minecraft_version}"
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Dont obfuscate!
    reobf = false

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            property("bsl.debug", "true")
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runClient'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'runServer'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'runData'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    mavenLocal()
    maven {
        url = uri("https://maven.terraformersmc.com/")
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:$jei_version")
    if (RUN_JEI == "true") {
        runtimeOnly("mezz.jei:jei-${minecraft_version}-forge:$jei_version")
    }

    // EMI
    compileOnly "dev.emi:emi-xplat-mojmap:$emi_version+$minecraft_version:api"

    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            fg.component(it)
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}